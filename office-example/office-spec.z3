(declare-sort Room)
(declare-const out Room)
(declare-const lob Room)
(declare-const cor Room)
(declare-const off Room)
(declare-const mr Room)
(assert (distinct out lob cor off mr))

(declare-const out_lob_h0 Int)
(declare-const out_lob_h1 Int)
(declare-const out_lob_h2 Int)
(declare-const out_cor_h0 Int)
(declare-const out_cor_h1 Int)
(declare-const out_cor_h2 Int)
(declare-const lob_out_h0 Int)
(declare-const lob_out_h1 Int)
(declare-const lob_out_h2 Int)
(declare-const lob_cor_h0 Int)
(declare-const lob_cor_h1 Int)
(declare-const lob_cor_h2 Int)
(declare-const cor_lob_h0 Int)
(declare-const cor_lob_h1 Int)
(declare-const cor_lob_h2 Int)
(declare-const cor_out_h0 Int)
(declare-const cor_out_h1 Int)
(declare-const cor_out_h2 Int)
(declare-const cor_off_h0 Int)
(declare-const cor_off_h1 Int)
(declare-const cor_off_h2 Int)
(declare-const cor_mr_h0 Int)
(declare-const cor_mr_h1 Int)
(declare-const cor_mr_h2 Int)
(declare-const off_cor_h0 Int)
(declare-const off_cor_h1 Int)
(declare-const off_cor_h2 Int)
(declare-const mr_cor_h0 Int)
(declare-const mr_cor_h1 Int)
(declare-const mr_cor_h2 Int)

(define-fun synth-connective ((from Room) (to Room) (l Bool) (r Bool)) Bool
  (if (and (= from out) (= to lob)) (if (= out_lob_h0 0) (and l r) (or l r))
  (if (and (= from out) (= to cor)) (if (= out_cor_h0 0) (and l r) (or l r))
  (if (and (= from lob) (= to out)) (if (= lob_out_h0 0) (and l r) (or l r))
  (if (and (= from lob) (= to cor)) (if (= lob_cor_h0 0) (and l r) (or l r))
  (if (and (= from cor) (= to lob)) (if (= cor_lob_h0 0) (and l r) (or l r))
  (if (and (= from cor) (= to out)) (if (= cor_out_h0 0) (and l r) (or l r))
  (if (and (= from cor) (= to off)) (if (= cor_off_h0 0) (and l r) (or l r))
  (if (and (= from cor) (= to mr))  (if (= cor_mr_h0 0)  (and l r) (or l r))
  (if (and (= from off) (= to cor)) (if (= off_cor_h0 0) (and l r) (or l r))
  (if (and (= from mr)  (= to cor)) (if (= mr_cor_h0 0) (and l r) (or l r)) false))))))))))
)

(define-fun synth-left ((from Room) (to Room) (o Bool)) Bool
  (if (and (= from out) (= to lob)) (if (= out_lob_h1 0) o (if (= out_lob_h1 1) (not o) true))
  (if (and (= from out) (= to cor)) (if (= out_cor_h1 0) o (if (= out_cor_h1 1) (not o) true))
  (if (and (= from lob) (= to out)) (if (= lob_out_h1 0) o (if (= lob_out_h1 1) (not o) true))
  (if (and (= from lob) (= to cor)) (if (= lob_cor_h1 0) o (if (= lob_cor_h1 1) (not o) true))
  (if (and (= from cor) (= to lob)) (if (= cor_lob_h1 0) o (if (= cor_lob_h1 1) (not o) true))
  (if (and (= from cor) (= to out)) (if (= cor_out_h1 0) o (if (= cor_out_h1 1) (not o) true))
  (if (and (= from cor) (= to off)) (if (= cor_off_h1 0) o (if (= cor_off_h1 1) (not o) true))
  (if (and (= from cor) (= to mr))  (if (= cor_mr_h1 0)  o (if (= cor_mr_h1 1) (not o) true))
  (if (and (= from off) (= to cor)) (if (= off_cor_h1 0) o (if (= off_cor_h1 1) (not o) true))
  (if (and (= from mr)  (= to cor)) (if (= mr_cor_h1 0) o  (if (= mr_cor_h1 1) (not o) true)) false))))))))))
)

(define-fun synth-right ((from Room) (to Room) (v Bool)) Bool
  (if (and (= from out) (= to lob)) (if (= out_lob_h2 0) v (if (= out_lob_h2 1) (not v) true))
  (if (and (= from out) (= to cor)) (if (= out_cor_h2 0) v (if (= out_cor_h2 1) (not v) true))
  (if (and (= from lob) (= to out)) (if (= lob_out_h2 0) v (if (= lob_out_h2 1) (not v) true))
  (if (and (= from lob) (= to cor)) (if (= lob_cor_h2 0) v (if (= lob_cor_h2 1) (not v) true))
  (if (and (= from cor) (= to lob)) (if (= cor_lob_h2 0) v (if (= cor_lob_h2 1) (not v) true))
  (if (and (= from cor) (= to out)) (if (= cor_out_h2 0) v (if (= cor_out_h2 1) (not v) true))
  (if (and (= from cor) (= to off)) (if (= cor_off_h2 0) v (if (= cor_off_h2 1) (not v) true))
  (if (and (= from cor) (= to mr))  (if (= cor_mr_h2 0)  v (if (= cor_mr_h2 1) (not v) true))
  (if (and (= from off) (= to cor)) (if (= off_cor_h2 0) v (if (= off_cor_h2 1) (not v) true))
  (if (and (= from mr)  (= to cor)) (if (= mr_cor_h2 0) v  (if (= mr_cor_h2 1) (not v) true)) false))))))))))
)

(define-fun authz ((from Room) (to Room) (o Bool) (v Bool)) Bool
  (synth-connective from to
    (synth-left from to o)
    (synth-right from to v)
  )
)

(define-fun fun_true ((r Room) (o Bool) (v Bool)) Bool true)
(define-fun fun_mr ((r Room) (o Bool) (v Bool)) Bool (= r mr))
(define-fun EU_fun_true_mr ((r Room) (o Bool) (v Bool)) Bool
  (or
    (fun_mr r o v)
    (exists ((r1 Room)) (and (distinct r r1) (fun_true r o v) (authz r r1 o v) (fun_mr r1 o v)))
    (exists ((r1 Room) (r2 Room)) (and (distinct r r1 r2) (fun_true r o v) (authz r r1 o v) (fun_true r1 o v) (authz r1 r2 o v) (fun_mr r2 o v)))
    (exists ((r1 Room) (r2 Room) (r3 Room)) (and (distinct r r1 r2 r3) (fun_true r o v) (authz r r1 o v) (fun_true r1 o v) (authz r1 r2 o v) (fun_true r2     o v) (authz r2 r3 o v) (fun_mr r3 o v)))
  )
)
(define-fun EF_mr ((r Room) (o Bool) (v Bool)) Bool (EU_fun_true_mr r o v))
(define-fun fun_off ((r Room) (o Bool) (v Bool)) Bool (= r off))
(define-fun EU_fun_true_off ((r Room) (o Bool) (v Bool)) Bool
  (or
    (fun_off r o v)
    (exists ((r1 Room)) (and (distinct r r1) (fun_true r o v) (authz r r1 o v) (fun_off r1 o v)))
    (exists ((r1 Room) (r2 Room)) (and (distinct r r1 r2) (fun_true r o v) (authz r r1 o v) (fun_true r1 o v) (authz r1 r2 o v) (fun_off r2 o v)))
    (exists ((r1 Room) (r2 Room) (r3 Room)) (and (distinct r r1 r2 r3) (fun_true r o v) (authz r r1 o v) (fun_true r1 o v) (authz r1 r2 o v) (fun_true r2     o v) (authz r2 r3 o v) (fun_off r3 o v)))
  )
)
(define-fun EF_off ((r Room) (o Bool) (v Bool)) Bool (EU_fun_true_off r o v))
(define-fun fun_lob ((r Room) (o Bool) (v Bool)) Bool (= r lob))
(define-fun neg_lob ((r Room) (o Bool) (v Bool)) Bool (not (fun_lob r o v)))
(define-fun EU_neg_lob_mr ((r Room) (o Bool) (v Bool)) Bool
  (or
    (fun_mr r o v)
    (exists ((r1 Room)) (and (distinct r r1) (neg_lob r o v) (authz r r1 o v) (fun_mr r1 o v)))
    (exists ((r1 Room) (r2 Room)) (and (distinct r r1 r2) (neg_lob r o v) (authz r r1 o v) (neg_lob r1 o v) (authz r1 r2 o v) (fun_mr r2 o v)))
    (exists ((r1 Room) (r2 Room) (r3 Room)) (and (distinct r r1 r2 r3) (neg_lob r o v) (authz r r1 o v) (neg_lob r1 o v) (authz r1 r2 o v) (neg_lob r2     o v) (authz r2 r3 o v) (fun_mr r3 o v)))
  )
)
(define-fun neg_EU_neg_lob_mr ((r Room) (o Bool) (v Bool)) Bool (not (EU_neg_lob_mr r o v)))
(define-fun fun_owner ((r Room) (o Bool) (v Bool)) Bool o)
(define-fun implies_off_owner ((r Room) (o Bool) (v Bool)) Bool (=> (fun_off r o v) (fun_owner r o v)))
(define-fun neg_implies_off_owner ((r Room) (o Bool) (v Bool)) Bool (not (implies_off_owner r o v)))
(define-fun EU_fun_true_neg_implies_off_owner ((r Room) (o Bool) (v Bool)) Bool
  (or
    (neg_implies_off_owner r o v)
    (exists ((r1 Room)) (and (distinct r r1) (fun_true r o v) (authz r r1 o v) (neg_implies_off_owner r1 o v)))
    (exists ((r1 Room) (r2 Room)) (and (distinct r r1 r2) (fun_true r o v) (authz r r1 o v) (fun_true r1 o v) (authz r1 r2 o v) (neg_implies_off_owner r2 o v)))
    (exists ((r1 Room) (r2 Room) (r3 Room)) (and (distinct r r1 r2 r3) (fun_true r o v) (authz r r1 o v) (fun_true r1 o v) (authz r1 r2 o v) (fun_true r2     o v) (authz r2 r3 o v) (neg_implies_off_owner r3 o v)))
  )
)
(define-fun EF_neg_implies_off_owner ((r Room) (o Bool) (v Bool)) Bool (EU_fun_true_neg_implies_off_owner r o v))
(define-fun neg_EF_neg_implies_off_owner ((r Room) (o Bool) (v Bool)) Bool (not (EF_neg_implies_off_owner r o v)))
(define-fun AG_implies_off_owner ((r Room) (o Bool) (v Bool)) Bool (neg_EF_neg_implies_off_owner r o v))


(assert 
  (forall ((r Room) (o Bool) (v Bool)) 
    (=> 
      (and o (= r out))
      (EF_off r o v)
    )
  )
)
(assert 
  (forall ((r Room) (o Bool) (v Bool)) 
    (=> 
      (and v (= r out))
      (EF_mr r o v)
    )
  )
)
(assert
  (forall ((r Room) (o Bool) (v Bool))
    (=> 
      (and v (= r out))
      (neg_EU_neg_lob_mr r o v)
    )
  )
)
(assert
  (forall ((r Room) (o Bool) (v Bool))
    (=> (= r out) (AG_implies_off_owner r o v))
  )
)

(check-sat)
(get-model)
