(declare-sort Room)
(declare-const out Room)
(declare-const lob Room)
(declare-const cor Room)
(declare-const off Room)
(declare-const mr Room)
(assert (distinct out lob cor off mr))

(declare-const out_lob_h0 Int)
(declare-const out_lob_h1 Int)
(declare-const out_lob_h2 Int)
(declare-const out_cor_h0 Int)
(declare-const out_cor_h1 Int)
(declare-const out_cor_h2 Int)
(declare-const lob_out_h0 Int)
(declare-const lob_out_h1 Int)
(declare-const lob_out_h2 Int)
(declare-const lob_cor_h0 Int)
(declare-const lob_cor_h1 Int)
(declare-const lob_cor_h2 Int)
(declare-const cor_lob_h0 Int)
(declare-const cor_lob_h1 Int)
(declare-const cor_lob_h2 Int)
(declare-const cor_out_h0 Int)
(declare-const cor_out_h1 Int)
(declare-const cor_out_h2 Int)
(declare-const cor_off_h0 Int)
(declare-const cor_off_h1 Int)
(declare-const cor_off_h2 Int)
(declare-const cor_mr_h0 Int)
(declare-const cor_mr_h1 Int)
(declare-const cor_mr_h2 Int)
(declare-const off_cor_h0 Int)
(declare-const off_cor_h1 Int)
(declare-const off_cor_h2 Int)
(declare-const mr_cor_h0 Int)
(declare-const mr_cor_h1 Int)
(declare-const mr_cor_h2 Int)

(define-fun synth-connective ((from Room) (to Room) (l Bool) (r Bool)) Bool
  (if (and (= from out) (= to lob)) (if (= out_lob_h0 0) (and l r) (or l r))
  (if (and (= from out) (= to cor)) (if (= out_cor_h0 0) (and l r) (or l r))
  (if (and (= from lob) (= to out)) (if (= lob_out_h0 0) (and l r) (or l r))
  (if (and (= from lob) (= to cor)) (if (= lob_cor_h0 0) (and l r) (or l r))
  (if (and (= from cor) (= to lob)) (if (= cor_lob_h0 0) (and l r) (or l r))
  (if (and (= from cor) (= to out)) (if (= cor_out_h0 0) (and l r) (or l r))
  (if (and (= from cor) (= to off)) (if (= cor_off_h0 0) (and l r) (or l r))
  (if (and (= from cor) (= to mr))  (if (= cor_mr_h0 0)  (and l r) (or l r))
  (if (and (= from off) (= to cor)) (if (= off_cor_h0 0) (and l r) (or l r))
  (if (and (= from mr)  (= to cor)) (if (= mr_cor_h0 0) (and l r) (or l r)) false))))))))))
)

(define-fun synth-left ((from Room) (to Room) (o Bool)) Bool
  (if (and (= from out) (= to lob)) (if (= out_lob_h1 0) o (if (= out_lob_h1 1) (not o) true))
  (if (and (= from out) (= to cor)) (if (= out_cor_h1 0) o (if (= out_cor_h1 1) (not o) true))
  (if (and (= from lob) (= to out)) (if (= lob_out_h1 0) o (if (= lob_out_h1 1) (not o) true))
  (if (and (= from lob) (= to cor)) (if (= lob_cor_h1 0) o (if (= lob_cor_h1 1) (not o) true))
  (if (and (= from cor) (= to lob)) (if (= cor_lob_h1 0) o (if (= cor_lob_h1 1) (not o) true))
  (if (and (= from cor) (= to out)) (if (= cor_out_h1 0) o (if (= cor_out_h1 1) (not o) true))
  (if (and (= from cor) (= to off)) (if (= cor_off_h1 0) o (if (= cor_off_h1 1) (not o) true))
  (if (and (= from cor) (= to mr))  (if (= cor_mr_h1 0)  o (if (= cor_mr_h1 1) (not o) true))
  (if (and (= from off) (= to cor)) (if (= off_cor_h1 0) o (if (= off_cor_h1 1) (not o) true))
  (if (and (= from mr)  (= to cor)) (if (= mr_cor_h1 0) o  (if (= mr_cor_h1 1) (not o) true)) false))))))))))
)

(define-fun synth-right ((from Room) (to Room) (v Bool)) Bool
  (if (and (= from out) (= to lob)) (if (= out_lob_h2 0) v (if (= out_lob_h2 1) (not v) true))
  (if (and (= from out) (= to cor)) (if (= out_cor_h2 0) v (if (= out_cor_h2 1) (not v) true))
  (if (and (= from lob) (= to out)) (if (= lob_out_h2 0) v (if (= lob_out_h2 1) (not v) true))
  (if (and (= from lob) (= to cor)) (if (= lob_cor_h2 0) v (if (= lob_cor_h2 1) (not v) true))
  (if (and (= from cor) (= to lob)) (if (= cor_lob_h2 0) v (if (= cor_lob_h2 1) (not v) true))
  (if (and (= from cor) (= to out)) (if (= cor_out_h2 0) v (if (= cor_out_h2 1) (not v) true))
  (if (and (= from cor) (= to off)) (if (= cor_off_h2 0) v (if (= cor_off_h2 1) (not v) true))
  (if (and (= from cor) (= to mr))  (if (= cor_mr_h2 0)  v (if (= cor_mr_h2 1) (not v) true))
  (if (and (= from off) (= to cor)) (if (= off_cor_h2 0) v (if (= off_cor_h2 1) (not v) true))
  (if (and (= from mr)  (= to cor)) (if (= mr_cor_h2 0) v  (if (= mr_cor_h2 1) (not v) true)) false))))))))))
)

(define-fun authz ((from Room) (to Room) (o Bool) (v Bool)) Bool
  (synth-connective from to
    (synth-left from to o)
    (synth-right from to v)
  )
)

(assert (forall ((o Bool) (v Bool)) (=> o (or 
    (and (authz out lob o v) (authz lob cor o v) (authz cor off o v)) 
    (and (authz out cor o v) (authz cor off o v))
))))
(assert (forall ((o Bool) (v Bool)) (=> v (or 
    (and (authz out lob o v) (authz lob cor o v) (authz cor mr o v)) 
    (and (authz out cor o v) (authz cor mr o v))
))))
(assert (forall ((o Bool) (v Bool)) (=> v 
    (not (and (authz out cor o v) (authz cor mr o v)))
)))
(assert (forall ((o Bool) (v Bool)) (=> (not o) (and 
    (not (and (authz out cor o v) (authz cor off o v)))   
    (not (and (authz out lob o v) (authz lob cor o v) (authz cor off o v)))
))))
(assert (forall ((o Bool) (v Bool)) 
  (and 
    (or (and (authz off cor o v) (authz cor lob o v) (authz lob out o v))
        (and (authz off cor o v) (authz cor out o v))
    )
    (or (and (authz mr cor o v) (authz cor lob o v) (authz lob out o v))
        (and (authz mr cor o v) (authz cor out o v))
    )
    (or (authz cor out o v)
        (and (authz cor lob o v) (authz lob out o v))
    )
    (or (authz lob out o v)
        (and (authz lob cor o v) (authz cor out o v))
    )
  )
))

(check-sat)
(get-model)
